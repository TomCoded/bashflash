Abadi, 2012, Consistency Tradeoffs in Modern Distributed Database System Design: The CAP Theorem is incomplete. Consistency v. Latency is the more common tradeoff and behavior absent partitioning is about this tradeoff. So use PACELC (pronounced pass-elk) to describe distributes databases (ddbs). Partition/Availability/Consistency/Else/Latency/Consistency. So PAEC chooses availability over consistency in presence of partition, ELSE chooses consistency over latency.
DynamoDB is Amazon's DDBS.
Yuan, 2014, Sample Testing Can Prevent Most Critical Failures: An Analysis of Production Failures in Distributed Data-Intensive Systems. In large production quality distributed systems (Cassandra, HBase, Hadoop DFS, Hadoop Mapreduce, Redis), almost all catastrophic bugs can be recreated with 3 nodes or less. A large chunk (~35%) are caused by obvious failures in error-handling code (E.g. an error-handler that only logs the bug, an error-handler that is empty, an error-handler with a FIXME or TODO, an error-handler that the programmer believes will never be triggered, an abort in an 'over-caught' i.e. overly broad error handler that catches a larger class of errors than it's designed to handle, etc...). Roughly 25% are ignoring the error in effect and roughly 8% are prematurely aborting the entire cluster, often via exception overcatch. Almost all catastrophic failures come from incorrect handling of non-fatal bugs (92%) and catastrophic bug logging is verbose (Average of ~800 log events, many at the info level), which is DISTINCT from non-catastrophic failures where only 25% arise from improper handling of non-fatal errors. It may be useful to start from error-handling cases and reverse-trace execution to generate input for testing, since many errors also arise from error-handling code that has a 100% failure rate in certain conditions and was obviously never tested correctly. Yuan implemented "aspirator," static checker for the trivial errors on Java bytecode and associated source.
